/*
This Verilog module, `clock_generator`, creates and manages two clock signals (`clk_usb` and `clk_vga`) 
and their corresponding reset signals (`reset_usb` and `reset_vga`). It's designed to handle the clocking 
needs for USB and VGA components, and includes a phase-locked loop (PLL) for clock signal generation and a clock divider to adjust the clock frequencies.

### Breakdown:

1. **Inputs and Outputs**:
   - **`clk` (input)**: The main input clock signal that drives the module.
   - **`clk_usb` (output)**: The USB clock signal generated by the PLL.
   - **`reset_usb` (output)**: The reset signal for the USB system, based on a counter.
   - **`clk_vga` (output)**: The VGA clock signal derived from the USB clock.
   - **`reset_vga` (output)**: The reset signal for the VGA system, shared with `reset_usb`.

2. **`locked` Signal**:
   - **`locked` (wire)**: Indicates when the PLL has locked onto the input clock signal, meaning it's outputting a stable, synchronized clock.

3. **PLL Instantiation**:
   - The PLL module (`my_pll`) is instantiated to generate the `clk_usb` clock signal.
   - **`inclk0`**: The input to the PLL, connected to the external clock (`clk`).
   - **`c0`**: The output clock from the PLL, which becomes `clk_usb`.
   - **`locked`**: Outputs the `locked` signal from the PLL to indicate a stable clock output.

4. **Reset Signal Generation**:
   - **`reset_cnt`**: A 6-bit counter (`reg [5:0]`) used to generate the `reset_usb` signal.
   - **`reset_usb`**: Derived from the most significant bit of the counter (`reset_usb = ~reset_cnt[5]`). 
   It ensures the system remains in reset mode until the counter reaches a specific value.
   - **Counter Update**: The counter is incremented on every positive edge of `clk_usb` as long as 
   the PLL is locked. When the counter reaches a value where `reset_cnt[5]` is high, the reset signal is deasserted.

5. **VGA Clock Divider**:
   - **`vga_clk_divider`**: A register used to divide the `clk_usb` signal by 2 to generate the VGA clock (`clk_vga`). 
   It toggles between 0 and 1 on each positive edge of `clk_usb` when not in reset.
   - **`clk_vga`**: Assigned to the value of `vga_clk_divider`, effectively dividing the `clk_usb` frequency by 2 to generate `clk_vga`.

6. **Reset VGA**:
   - **`reset_vga`**: The reset signal for the VGA system is shared with the USB reset signal (`reset_vga = reset_usb`).

### Purpose:
- **PLL Clock Generation**: The module uses a PLL to generate a USB clock (`clk_usb`) from the main clock input (`clk`).
- **Clock Division**: It divides the `clk_usb` by 2 to produce a lower frequency VGA clock (`clk_vga`).
- **Reset Management**: A counter ensures that both the USB and VGA systems stay in reset for a few clock cycles after 
power-up or PLL lock, allowing time for the clocks to stabilize.

This clock generator could be used in an FPGA system that needs both USB and VGA interfaces, providing stable clocking for both subsystems.
*/

module clock_generator
  (input  clk,
   output clk_usb,
   output reset_usb,
   output clk_vga,
   output reset_vga
   );
   wire locked;
   reg vga_clk_divider;
   
   // PLL instantiation
   my_pll pll_inst (
      .inclk0(clk),
      .c0(clk_usb),
      .locked(locked)
   );
   
   // Generate reset signal
   reg [5:0] reset_cnt = 0;
   assign reset_usb = ~reset_cnt[5];
   always @(posedge clk_usb)
     if (locked) reset_cnt <= reset_cnt + reset_usb;
   
   // divide usb clock by two to get vga clock
   always @(posedge clk_usb) begin
      if (reset_usb) vga_clk_divider <= 0;
      else vga_clk_divider <= ~vga_clk_divider;
   end
   
   assign clk_vga = vga_clk_divider;
   assign reset_vga = reset_usb;
endmodule